#![allow(non_snake_case)]

use crate::gb::utils::*;

use super::{instructions::*, prefixed_operations::*};

/// Run immediate prefixed operation `n8`.
pub fn PREFIX_n8() -> Instruction {
    Instruction::new("PREFIX".to_string(), move |_emu| {
        // ? One bus read or write per m-cycle.
        return InstructionStep::new(move |emu| {
            let op = emu.read_pc();
            return match op {
                // * 0x0_
                0x00 => RLC_r8(emu, Register::B),
                0x01 => RLC_r8(emu, Register::C),
                0x02 => RLC_r8(emu, Register::D),
                0x03 => RLC_r8(emu, Register::E),
                0x04 => RLC_r8(emu, Register::H),
                0x05 => RLC_r8(emu, Register::L),
                0x06 => RLC_r16(emu, RegisterPair::HL),
                0x07 => RLC_r8(emu, Register::A),
                0x08 => RRC_r8(emu, Register::B),
                0x09 => RRC_r8(emu, Register::C),
                0x0A => RRC_r8(emu, Register::D),
                0x0B => RRC_r8(emu, Register::E),
                0x0C => RRC_r8(emu, Register::H),
                0x0D => RRC_r8(emu, Register::L),
                0x0E => RRC_r16(emu, RegisterPair::HL),
                0x0F => RRC_r8(emu, Register::A),
                // * 0x1_
                0x10 => RL_r8(emu, Register::B),
                0x11 => RL_r8(emu, Register::C),
                0x12 => RL_r8(emu, Register::D),
                0x13 => RL_r8(emu, Register::E),
                0x14 => RL_r8(emu, Register::H),
                0x15 => RL_r8(emu, Register::L),
                0x16 => RL_r16(emu, RegisterPair::HL),
                0x17 => RL_r8(emu, Register::A),
                0x18 => RR_r8(emu, Register::B),
                0x19 => RR_r8(emu, Register::C),
                0x1A => RR_r8(emu, Register::D),
                0x1B => RR_r8(emu, Register::E),
                0x1C => RR_r8(emu, Register::H),
                0x1D => RR_r8(emu, Register::L),
                0x1E => RR_r16(emu, RegisterPair::HL),
                0x1F => RR_r8(emu, Register::A),
                // * 0x2_
                0x20 => SLA_r8(emu, Register::B),
                0x21 => SLA_r8(emu, Register::C),
                0x22 => SLA_r8(emu, Register::D),
                0x23 => SLA_r8(emu, Register::E),
                0x24 => SLA_r8(emu, Register::H),
                0x25 => SLA_r8(emu, Register::L),
                0x26 => SLA_r16(emu, RegisterPair::HL),
                0x27 => SLA_r8(emu, Register::A),
                0x28 => SRA_r8(emu, Register::B),
                0x29 => SRA_r8(emu, Register::C),
                0x2A => SRA_r8(emu, Register::D),
                0x2B => SRA_r8(emu, Register::E),
                0x2C => SRA_r8(emu, Register::H),
                0x2D => SRA_r8(emu, Register::L),
                0x2E => SRA_r16(emu, RegisterPair::HL),
                0x2F => SRA_r8(emu, Register::A),
                // * 0x3_
                0x30 => SWAP_r8(emu, Register::B),
                0x31 => SWAP_r8(emu, Register::C),
                0x32 => SWAP_r8(emu, Register::D),
                0x33 => SWAP_r8(emu, Register::E),
                0x34 => SWAP_r8(emu, Register::H),
                0x35 => SWAP_r8(emu, Register::L),
                0x36 => SWAP_r16(emu, RegisterPair::HL),
                0x37 => SWAP_r8(emu, Register::A),
                0x38 => SRL_r8(emu, Register::B),
                0x39 => SRL_r8(emu, Register::C),
                0x3A => SRL_r8(emu, Register::D),
                0x3B => SRL_r8(emu, Register::E),
                0x3C => SRL_r8(emu, Register::H),
                0x3D => SRL_r8(emu, Register::L),
                0x3E => SRL_r16(emu, RegisterPair::HL),
                0x3F => SRL_r8(emu, Register::A),
                // * 0x4_
                0x40 => BIT_b_r8(emu, 0, Register::B),
                0x41 => BIT_b_r8(emu, 0, Register::C),
                0x42 => BIT_b_r8(emu, 0, Register::D),
                0x43 => BIT_b_r8(emu, 0, Register::E),
                0x44 => BIT_b_r8(emu, 0, Register::H),
                0x45 => BIT_b_r8(emu, 0, Register::L),
                0x46 => BIT_b_r16(emu, 0, RegisterPair::HL),
                0x47 => BIT_b_r8(emu, 0, Register::A),
                0x48 => BIT_b_r8(emu, 1, Register::B),
                0x49 => BIT_b_r8(emu, 1, Register::C),
                0x4A => BIT_b_r8(emu, 1, Register::D),
                0x4B => BIT_b_r8(emu, 1, Register::E),
                0x4C => BIT_b_r8(emu, 1, Register::H),
                0x4D => BIT_b_r8(emu, 1, Register::L),
                0x4E => BIT_b_r16(emu, 1, RegisterPair::HL),
                0x4F => BIT_b_r8(emu, 1, Register::A),
                // * 0x5_
                0x50 => BIT_b_r8(emu, 2, Register::B),
                0x51 => BIT_b_r8(emu, 2, Register::C),
                0x52 => BIT_b_r8(emu, 2, Register::D),
                0x53 => BIT_b_r8(emu, 2, Register::E),
                0x54 => BIT_b_r8(emu, 2, Register::H),
                0x55 => BIT_b_r8(emu, 2, Register::L),
                0x56 => BIT_b_r16(emu, 2, RegisterPair::HL),
                0x57 => BIT_b_r8(emu, 2, Register::A),
                0x58 => BIT_b_r8(emu, 3, Register::B),
                0x59 => BIT_b_r8(emu, 3, Register::C),
                0x5A => BIT_b_r8(emu, 3, Register::D),
                0x5B => BIT_b_r8(emu, 3, Register::E),
                0x5C => BIT_b_r8(emu, 3, Register::H),
                0x5D => BIT_b_r8(emu, 3, Register::L),
                0x5E => BIT_b_r16(emu, 3, RegisterPair::HL),
                0x5F => BIT_b_r8(emu, 3, Register::A),
                // * 0x6_
                0x60 => BIT_b_r8(emu, 4, Register::B),
                0x61 => BIT_b_r8(emu, 4, Register::C),
                0x62 => BIT_b_r8(emu, 4, Register::D),
                0x63 => BIT_b_r8(emu, 4, Register::E),
                0x64 => BIT_b_r8(emu, 4, Register::H),
                0x65 => BIT_b_r8(emu, 4, Register::L),
                0x66 => BIT_b_r16(emu, 4, RegisterPair::HL),
                0x67 => BIT_b_r8(emu, 4, Register::A),
                0x68 => BIT_b_r8(emu, 5, Register::B),
                0x69 => BIT_b_r8(emu, 5, Register::C),
                0x6A => BIT_b_r8(emu, 5, Register::D),
                0x6B => BIT_b_r8(emu, 5, Register::E),
                0x6C => BIT_b_r8(emu, 5, Register::H),
                0x6D => BIT_b_r8(emu, 5, Register::L),
                0x6E => BIT_b_r16(emu, 5, RegisterPair::HL),
                0x6F => BIT_b_r8(emu, 5, Register::A),
                // * 0x7_
                0x70 => BIT_b_r8(emu, 6, Register::B),
                0x71 => BIT_b_r8(emu, 6, Register::C),
                0x72 => BIT_b_r8(emu, 6, Register::D),
                0x73 => BIT_b_r8(emu, 6, Register::E),
                0x74 => BIT_b_r8(emu, 6, Register::H),
                0x75 => BIT_b_r8(emu, 6, Register::L),
                0x76 => BIT_b_r16(emu, 6, RegisterPair::HL),
                0x77 => BIT_b_r8(emu, 6, Register::A),
                0x78 => BIT_b_r8(emu, 7, Register::B),
                0x79 => BIT_b_r8(emu, 7, Register::C),
                0x7A => BIT_b_r8(emu, 7, Register::D),
                0x7B => BIT_b_r8(emu, 7, Register::E),
                0x7C => BIT_b_r8(emu, 7, Register::H),
                0x7D => BIT_b_r8(emu, 7, Register::L),
                0x7E => BIT_b_r16(emu, 7, RegisterPair::HL),
                0x7F => BIT_b_r8(emu, 7, Register::A),
                // * 0x8_
                0x80 => RES_b_r8(emu, 0, Register::B),
                0x81 => RES_b_r8(emu, 0, Register::C),
                0x82 => RES_b_r8(emu, 0, Register::D),
                0x83 => RES_b_r8(emu, 0, Register::E),
                0x84 => RES_b_r8(emu, 0, Register::H),
                0x85 => RES_b_r8(emu, 0, Register::L),
                0x86 => RES_b_r16(emu, 0, RegisterPair::HL),
                0x87 => RES_b_r8(emu, 0, Register::A),
                0x88 => RES_b_r8(emu, 1, Register::B),
                0x89 => RES_b_r8(emu, 1, Register::C),
                0x8A => RES_b_r8(emu, 1, Register::D),
                0x8B => RES_b_r8(emu, 1, Register::E),
                0x8C => RES_b_r8(emu, 1, Register::H),
                0x8D => RES_b_r8(emu, 1, Register::L),
                0x8E => RES_b_r16(emu, 1, RegisterPair::HL),
                0x8F => RES_b_r8(emu, 1, Register::A),
                // * 0x9_
                0x90 => RES_b_r8(emu, 2, Register::B),
                0x91 => RES_b_r8(emu, 2, Register::C),
                0x92 => RES_b_r8(emu, 2, Register::D),
                0x93 => RES_b_r8(emu, 2, Register::E),
                0x94 => RES_b_r8(emu, 2, Register::H),
                0x95 => RES_b_r8(emu, 2, Register::L),
                0x96 => RES_b_r16(emu, 2, RegisterPair::HL),
                0x97 => RES_b_r8(emu, 2, Register::A),
                0x98 => RES_b_r8(emu, 3, Register::B),
                0x99 => RES_b_r8(emu, 3, Register::C),
                0x9A => RES_b_r8(emu, 3, Register::D),
                0x9B => RES_b_r8(emu, 3, Register::E),
                0x9C => RES_b_r8(emu, 3, Register::H),
                0x9D => RES_b_r8(emu, 3, Register::L),
                0x9E => RES_b_r16(emu, 3, RegisterPair::HL),
                0x9F => RES_b_r8(emu, 3, Register::A),
                // * 0xA_
                0xA0 => RES_b_r8(emu, 4, Register::B),
                0xA1 => RES_b_r8(emu, 4, Register::C),
                0xA2 => RES_b_r8(emu, 4, Register::D),
                0xA3 => RES_b_r8(emu, 4, Register::E),
                0xA4 => RES_b_r8(emu, 4, Register::H),
                0xA5 => RES_b_r8(emu, 4, Register::L),
                0xA6 => RES_b_r16(emu, 4, RegisterPair::HL),
                0xA7 => RES_b_r8(emu, 4, Register::A),
                0xA8 => RES_b_r8(emu, 5, Register::B),
                0xA9 => RES_b_r8(emu, 5, Register::C),
                0xAA => RES_b_r8(emu, 5, Register::D),
                0xAB => RES_b_r8(emu, 5, Register::E),
                0xAC => RES_b_r8(emu, 5, Register::H),
                0xAD => RES_b_r8(emu, 5, Register::L),
                0xAE => RES_b_r16(emu, 5, RegisterPair::HL),
                0xAF => RES_b_r8(emu, 5, Register::A),
                // * 0xB_
                0xB0 => RES_b_r8(emu, 6, Register::B),
                0xB1 => RES_b_r8(emu, 6, Register::C),
                0xB2 => RES_b_r8(emu, 6, Register::D),
                0xB3 => RES_b_r8(emu, 6, Register::E),
                0xB4 => RES_b_r8(emu, 6, Register::H),
                0xB5 => RES_b_r8(emu, 6, Register::L),
                0xB6 => RES_b_r16(emu, 6, RegisterPair::HL),
                0xB7 => RES_b_r8(emu, 6, Register::A),
                0xB8 => RES_b_r8(emu, 7, Register::B),
                0xB9 => RES_b_r8(emu, 7, Register::C),
                0xBA => RES_b_r8(emu, 7, Register::D),
                0xBB => RES_b_r8(emu, 7, Register::E),
                0xBC => RES_b_r8(emu, 7, Register::H),
                0xBD => RES_b_r8(emu, 7, Register::L),
                0xBE => RES_b_r16(emu, 7, RegisterPair::HL),
                0xBF => RES_b_r8(emu, 7, Register::A),
                // * 0xC_
                0xC0 => SET_b_r8(emu, 0, Register::B),
                0xC1 => SET_b_r8(emu, 0, Register::C),
                0xC2 => SET_b_r8(emu, 0, Register::D),
                0xC3 => SET_b_r8(emu, 0, Register::E),
                0xC4 => SET_b_r8(emu, 0, Register::H),
                0xC5 => SET_b_r8(emu, 0, Register::L),
                0xC6 => SET_b_r16(emu, 0, RegisterPair::HL),
                0xC7 => SET_b_r8(emu, 0, Register::A),
                0xC8 => SET_b_r8(emu, 1, Register::B),
                0xC9 => SET_b_r8(emu, 1, Register::C),
                0xCA => SET_b_r8(emu, 1, Register::D),
                0xCB => SET_b_r8(emu, 1, Register::E),
                0xCC => SET_b_r8(emu, 1, Register::H),
                0xCD => SET_b_r8(emu, 1, Register::L),
                0xCE => SET_b_r16(emu, 1, RegisterPair::HL),
                0xCF => SET_b_r8(emu, 1, Register::A),
                // * 0xD_
                0xD0 => SET_b_r8(emu, 2, Register::B),
                0xD1 => SET_b_r8(emu, 2, Register::C),
                0xD2 => SET_b_r8(emu, 2, Register::D),
                0xD3 => SET_b_r8(emu, 2, Register::E),
                0xD4 => SET_b_r8(emu, 2, Register::H),
                0xD5 => SET_b_r8(emu, 2, Register::L),
                0xD6 => SET_b_r16(emu, 2, RegisterPair::HL),
                0xD7 => SET_b_r8(emu, 2, Register::A),
                0xD8 => SET_b_r8(emu, 3, Register::B),
                0xD9 => SET_b_r8(emu, 3, Register::C),
                0xDA => SET_b_r8(emu, 3, Register::D),
                0xDB => SET_b_r8(emu, 3, Register::E),
                0xDC => SET_b_r8(emu, 3, Register::H),
                0xDD => SET_b_r8(emu, 3, Register::L),
                0xDE => SET_b_r16(emu, 3, RegisterPair::HL),
                0xDF => SET_b_r8(emu, 3, Register::A),
                // * 0xE_
                0xE0 => SET_b_r8(emu, 4, Register::B),
                0xE1 => SET_b_r8(emu, 4, Register::C),
                0xE2 => SET_b_r8(emu, 4, Register::D),
                0xE3 => SET_b_r8(emu, 4, Register::E),
                0xE4 => SET_b_r8(emu, 4, Register::H),
                0xE5 => SET_b_r8(emu, 4, Register::L),
                0xE6 => SET_b_r16(emu, 4, RegisterPair::HL),
                0xE7 => SET_b_r8(emu, 4, Register::A),
                0xE8 => SET_b_r8(emu, 5, Register::B),
                0xE9 => SET_b_r8(emu, 5, Register::C),
                0xEA => SET_b_r8(emu, 5, Register::D),
                0xEB => SET_b_r8(emu, 5, Register::E),
                0xEC => SET_b_r8(emu, 5, Register::H),
                0xED => SET_b_r8(emu, 5, Register::L),
                0xEE => SET_b_r16(emu, 5, RegisterPair::HL),
                0xEF => SET_b_r8(emu, 5, Register::A),
                // * 0xF_
                0xF0 => SET_b_r8(emu, 6, Register::B),
                0xF1 => SET_b_r8(emu, 6, Register::C),
                0xF2 => SET_b_r8(emu, 6, Register::D),
                0xF3 => SET_b_r8(emu, 6, Register::E),
                0xF4 => SET_b_r8(emu, 6, Register::H),
                0xF5 => SET_b_r8(emu, 6, Register::L),
                0xF6 => SET_b_r16(emu, 6, RegisterPair::HL),
                0xF7 => SET_b_r8(emu, 6, Register::A),
                0xF8 => SET_b_r8(emu, 7, Register::B),
                0xF9 => SET_b_r8(emu, 7, Register::C),
                0xFA => SET_b_r8(emu, 7, Register::D),
                0xFB => SET_b_r8(emu, 7, Register::E),
                0xFC => SET_b_r8(emu, 7, Register::H),
                0xFD => SET_b_r8(emu, 7, Register::L),
                0xFE => SET_b_r16(emu, 7, RegisterPair::HL),
                0xFF => SET_b_r8(emu, 7, Register::A),
            };
        });
    })
}
